#Bash Script:
cat /etc/shells --> To check list of shells
which bash -->To check current bash
touch filename.sh --> to create a bash script
chmod +x filename.sh --> To change the file in to executable mode
vi filename.sh --> To open the file in vi editor
esc :wq --> To save & close the vi editor

Redirecting the file using path locations:
cat >> filename.extension --> typed data will be moved to the given filename.extension
cat << anything
This is the New style of learning bash script.
Output will be on the
anything
the output will be "This is the New style of learning bash script.
Output will be on the

Comments:
# --> Single line command
: ' data ' --> Multi line command

Operators:
-eq  --> Equal to
-ne  --> Not Equal to
-gt  --> Greater than
-lt  --> Less than
-ge  --> Greater than equal to
-le  --> Less than equal to

If condition:
Example: Count equals to 10, then it will result true or else false, below is script:
#! /bin/bash
count=10
if [ $count -ne 9 ]
then
    echo "True"
else
    echo "False"
fi
Result: True

Example2:
elif condition
#! /bin/bash
count=9
if [ $count -gt 9 ]
then
	echo "First Statement is true"
elif [ $count -lt 9 ]
then
	echo "Second Statement is true"
elif [ $count -eq 9 ]
then
	echo "Third Statement is true"
else
	echo "False"
fi
Result: Third statement is true

AND Operator:
Example1:
#! /bin/bash
Age=35
if [ $Age -lt 18 ] && [ $Age -gt 65 ]
then
	echo "You are Eligible for Vote..!"
else
	echo "Not Eligible for Vote..!"
fi
Result: You are eligible for vote..!

Example2:
#! /bin/bash
age=25
if [ $age -gt 18 -a $age -lt 27 ]
then
	echo "Eligible of Job..!"
else
	echo "Not eligible for Job..!"
fi
Result: Eligible for Job..!

OR Operator:
Example1:
#! /bin/bash

age=30
if [ $age -lt 18 -o $age -gt 50 ]
then
	echo "You are eligible for Job..!"
else
	echo "You are not eligible for Job..!"
fi
Result: You are not eligible for Job..!

Example2:
#! /bin/bash
age=30
if [ $age -lt 18 ] || [ $age -gt 50 ]
then
	echo "Age is correct"
else
	echo "Age is not correct"
fi
Result: Age is not correct

Example3:
#! /bin/bash
age=30
if [ $age -lt 18 ] || [ $age -gt 50 ]
then
	echo "Age is correct"
else
	echo "Age is not correct"
fi
Result: Age is not correct

whileloop:
Example1:
#! /bin/bash
number=1
while [ $number -le 5 ]
do
	echo "$number"
	number=$(( number+1 ))
done
Result: while loop works till the number = 5
1
2
3
4
5

Example2:
#! /bin/bash
number=1
while [ $number -lt 5 ]
do
	echo "$number"
	number=$(( number+1 ))
done
Result:while loop works till the number +1
1
2
3
4

until loop:
Example:
#! /bin/bash

count=1
until [ $count -ge 10 ]
do
	echo $count
	count=$(( count+1 ))
done
Result: 
1
2
3
4

forloop:
Example1:
#! /bin/bash

for i in 1 2 3 4 5
do
	echo $i
done
Result: for loop runs till the given number comes
1
2
3
4
5
Example2:
#! /bin/bash

for i in {0..20..3}
#{start..ending..increment}
do
	echo $i
done
Result: for loop works with given arguments and condition of increment number
0
3
6
9
12
15
18

forloop with break:
Example:
#! /bin/bash

for (( i=0; i<=10; i++ ))
do
	if [ $i -gt 5 ]
	then
		break
	fi
	echo $i
done
Result: count from 1 to 5; after 5 the loop will break
1
2
3
4
5

forloop with continue:
Example:
#! /bin/bash

for (( i=0; i<10; i++ ))
do
	if [ $i -eq 3 ] || [ $i -eq 7 ]
	then
		continue
	fi
	echo $i
done
Result: count from 0 - 10 and skips 3 & 7
0
1
2
4
5
6
8
9

Script Input (Read file):
Example:
#! /bin/bash

while read line
do
	echo "$line"
done < "${1:-/dev/stdin}"
Result: whatever you type it will shows

Example2:
#! /bin/bash

while read line
do
	echo "$line"
done < "${1:-/dev/stdin}"
Result: in terminal if you run the file name along with read file also it will read the file.
<source filename> <read file name>

Script Output:
Example:
#! /bin/bash
ls -al 1>file1.txt 2>file.txt

Result: when you run the script it will create two files. file1.txt file create the list of details and file2.txt will create empty.

Example2:
#! /bin/bash
ls +al 1>file1.txt 2>file.txt

Result: when you run the script it will create two files. file1.txt file create empty and file2.txt will create error details.

Example3:
#! /bin/bash

ls -al >file.txt 2>&1
(or)
ls-al >&file.txt

Result: when you run the script it will create file.txt and load the command data and if there is an error then error data will append in the file.txt

Sending Scripts to another file:
Example1:
file1.sh
#! /bin/bash

MESSAGE="Ahemad Baba, MBA"
export MESSAGE
./file2.sh
file2.sh
#! /bin/bash
echo "My name is : $MESSAGE"

When you the file1.sh output will be "My name is : Ahemad Baba, MBA"

STRINGS:
Example1:
#! /bin/bash

echo "Enter First String : "
read str1
echo "Enter Second String : "
read str2

if [ $str1 == $str2 ]
then
	echo "Strings Match"
else
	echo "Strings doesn't match"
fi
Result: when you run the script (It is a case sensitive):
Enter First String:
Hello
Enter Second String:
hello
Strings doesn't match

Result: when you run the script:
Enter First String:
Hello
Enter Second String:
Hello
Strings Match

Example2:
#! /bin/bash

echo "Enter First String"
read str1
echo "Enter Second String"
read str2

if [ "$str1" \< "$str2" ]
then
	echo "$str1 is smaller than $str2"
elif [ "$str1" \> "$str2" ]
then
	echo "$str1 is greater than $str2"
else
	echo "Both strings are equal"
fi
Result: when you run the script:
Enter First String:
Hello
Enter Second String:
hello
Output: Hello is smaller than hello

Result: when you run the script:
Enter First String:
Hello
Enter Second String:
Hello
Output: Both strings are equal

Example3:
#! /bin/bash

echo "Enter First String"
read str1
echo "Enter Second String"
read str2
c=${str1^}${str2^^}
echo $c
#^ --> Lower case
#^^ --> Upper Case
#^l --> Proper Case (First Letter Capitalize)
Result: Append the two strings
Enter First String:
HEllo
Enter Second String:
world
Output: helloWORLD

Example4:
#! /bin/bash

echo "Enter First String"
read str1
echo "Enter Second String"
read str2
echo "Enter Third String"
read str3
c=${str1^}${str2^^} ${str2^l}
echo $c
Result: Append the multiple strings
Enter First String:
HEllo
Enter Second String:
world
Output: helloWORLD

Number & Arithmetic Operators:
Example1:
#! /bin/bash
echo 10 + 10
Result: 10 + 10

Example2:
#! /bin/bash
n=10
n1=10
echo $(( n + n1 ))
or 
echo $(expr $n + $n1)
Result: 20

Example3:
#! /bin/bash
n=10
n1=10
echo $(( n * n1 ))
or
echo $(expr $n \* $n1)
Result: 100

Hexa Decimal Numbers:
Example:
#! /bin/bash
echo "Enter the Hexadecimal number"
read Hex
echo -n "The decimal value of $Hex is : "
echo "obase=10; ibase=17; $Hex" | bc
Result: Hex = ABC
The decimal value of ABC is : 3089

Arrays:
Example1:
#! /bin/bash

mobile=('OnePlus' 'Samsung' 'Nokia')

echo "${mobile[@]}"
echo "${!mobile[@]}"
echo "${#mobile[@]}"
Result:
OnePlus Samsung Nokia
0 1 2 [Index number]
3 [count of index]

Functions:
Example:
#! /bin/bash
function funcName()
{
	echo "This is the new function"
}
funcName
Result: This is the new function

Example2:
#! /bin/bash
function funcPrint()
{
	echo $1 $2 --> $1 & $1 --> are arguments
}
funcPrint Hello Script
Result: Hello Script

Example3:
function funcCheck()
{
	value="Function is working properly"
	echo "$value"
}
funcCheck
Result: Function is worknig properly

Example4:
function funcCheck()
{
	value="Local Variable"
}
value="Global Variable"
echo $value

funcCheck
echo $value
Result:
Global Variable
Local Variable

Files & Directories:
Example: To check the direct exists or not ?
! /bin/bash
echo "Check the directory !"
read direct
if [ -d "$direct" ]
then
	echo "$direct exists"
else
	echo "$direct doesn't exist"
fi
Result: Check the directory --> provide the folder name
Output: given folder name with doesn't exist

Example1: To check the file exists or not ?
! /bin/bash
echo "Check the file !"
read filename
if [ -d "$filename" ]
then
	echo "$file exists"
else
	echo "$file doesn't exist"
fi
Result: Check the filename --> provide the file name
Output: given file name with doesn't exist

Example2: To create file and directory using script.
#! /bin/bash
echo "Enter the file name to create..!"
read filename
echo "Enter the folder name to create..!"
read foldername
touch $filename
mkdir $foldername
Result: give the file name and after that folder name.

Example3: To append the existing file using script.
#! /bin/bash
echo "Enter the file name"
read filename
if [ -f "$filename" ]
then
	echo "Enter the text to the filename to append"
	read filetext
	echo "$filetext" >> $filename (if you use single > it will delete the existing data and overwrite; if you use double >> it will append with the existing data)
else
	echo "$filename doesn't exits"
fi

Example4: To read the file line by line using script.
#! /bin/bash
echo "Enter filename from which you want to read"
read filename
if [ -f "$filename" ]
then
	while IFS= read -r line
	do
		echo "$line"
	done <$filename
else
	echo "$filename doesn't exist"
fi

Example5: To remove the file by using script
#! /bin/bash
echo "Enter the filename to delete"
read filename

if [ -f $filename ]
then
	rm $filename
else
	echo "$filename doesn't exist"
fi

Example6: To create a new file with execute permission using the script
#! /bin/bash
echo "Enter new file name"
read filename
touch $filename
if [ -f $filename ]
then
	chmod +x $filename
else
	echo "Create a file"
fi

Send email using bash script:
Example:
sudo apt install ssmtp
gedit /etc/ssmtp/ssmtp.conf
root=emailid
mailhub=smtp.gmail.com:587
AuthUser=emailid
AuthPass=password
UseSTARTTLS=yes

create a file using the data --> ssmtp emailid
run above file
To: receiver email id
From: your email id
Subject: Subject line 
Body Line
Ctrl + D

Curl :
To download the file using curl
Example:
#! /bin/bash

url="http://www.ovh.net/files/1Mb.dat"
curl ${url} -O
Result: Downloaded the file output on screen

To view the file information using curl
Example1:
#! /bin/bash
url="http://www.ovh.net/files/1Mb.dat"
curl -I ${url}

SELECT or Professional Menu's:
Example:
#! /bin/bash
#select mobile in OnePlus Samsung Nokia Oppo
#do
#	echo "You have selected $mobile"
#done
Output: list all the mobiles 

Example2:
#! /bin/bash
select mobile in OnePlus Samsung Nokia Oppo
do
	case $mobile in
	OnePlus)
		echo "OnePlus Selected";;
	Samsung)
		echo "Samsung Selected";;
	Nokia)
		echo "Nokia Selected";;
	Oppo)
		echo "Oppo Selected";;
	*)
		echo "Error: Please selected between 1..4";;
	esac
done

Example3:
#! /bin/bash
echo "Press any key to continue"
while [ true ]
do
	read -t 3 -n 1
if [ $? = 0 ]
then
	echo "you have terminated from the Script..!"
	exit;
else
	echo "waiting to press any key"
fi
done

inotify:
Example:
#! /bin/bash

mkdir -p temp/newfolder
inotifywait -m temp/newfolder
Output:
Create a directory and then you can create a file and adding and deleting the data from the file.
In another terminal it will show the operational activities.

